use std::fmt::{Display, Formatter};
use serde::Serialize;

#[macro_export]
macro_rules! features {
        ($($feature:expr),* $(,)?) => {
            {
                #[allow(unused_mut)]
                let mut set = HashSet::new();
                $(
                    set.insert($feature);
                )*
                set
            }
        };
    }

#[derive(Clone, PartialEq, Eq, Hash, Debug, Serialize)]
pub enum CardFeature {
    DoubleCrush,
    TripleCrush,
    DiscardOpponent,
    RandomDiscard,
    Draw,
    Assassin,
    Freeze,
    Drop,
    // DeckAttack,
    OnDrop,
    OnRefresh,
    Lancer,
    SLancer,
    Penetrate,
    NonAttackable,
    Down,
    Up,
    Charge,
    EnerAttack,
    Trash,
    Ener,
    PowerUp,
    PowerDown,
    Bounce,
    DeckBounce,
    Salvage,
    LifeBurst,
    Shadow,
    Invulnerable,
    OnSpell,
    OnArts,
    OnPiece,
    OnBanish,
    Banish,
    Guard,
    OnGuard,
    AttackNoEffect,
    OnAttack,
    OnAttackStart,
    OnTouch,
    Awake,
    Exceed,
    OnExceed,
    AddLife,
    OnBurst,
    LifeTrash,
    LifeCrush,
    Damage,
    OnLifeCrush,
    Position,
    Vanilla,
    Untouchable,
    // アークゲイン
    TopCheck,
    BottomCheck,
    Barrier,
    MultiEner,
    LrigTrash,
    Charm,
    Craft,
    Acce,
}

impl Display for CardFeature {
    #[allow(unreachable_patterns)]
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let label = match self {
            CardFeature::DoubleCrush => "ダブルクラッシュ",
            CardFeature::TripleCrush => "トリプルクラッシュ",
            CardFeature::DiscardOpponent => "手札破壊",
            CardFeature::RandomDiscard => "ランダム手札破壊",
            CardFeature::Draw => "ドロー",
            CardFeature::Assassin => "アサシン",
            CardFeature::Freeze => "凍結",
            CardFeature::Drop => "デッキドロップ", // DeckAttack,
            CardFeature::OnDrop => "デッキドロップ時",
            CardFeature::OnRefresh => "リフレッシュ時",
            CardFeature::Lancer => "ランサー",
            CardFeature::SLancer => "Sランサー",
            CardFeature::Penetrate => "ガード不可",
            CardFeature::NonAttackable => "アタック不可",
            CardFeature::Down => "ダウン",
            CardFeature::Up => "アップ",
            CardFeature::Charge => "エナチャージ",
            CardFeature::EnerAttack => "エナ破壊",
            CardFeature::Trash => "トラッシュ送り",
            CardFeature::Ener => "エナ送り",
            CardFeature::PowerUp => "パワーアップ",
            CardFeature::PowerDown => "パワーダウン",
            CardFeature::Bounce => "バウンス",
            CardFeature::DeckBounce => "デッキバウンス",
            CardFeature::Salvage => "回収",
            CardFeature::LifeBurst => "ライフバースト",
            CardFeature::Shadow => "シャドウ",
            CardFeature::Invulnerable => "バニッシュされない",
            CardFeature::OnSpell => "スペル使用時",
            CardFeature::OnArts => "アーツ使用時",
            CardFeature::OnPiece => "ピース使用時",
            CardFeature::OnBanish => "バニッシュした時",
            CardFeature::Banish => "バニッシュ",
            CardFeature::Guard => "ガード",
            CardFeature::OnGuard => "ガードした時",
            CardFeature::AttackNoEffect => "アタック無効",
            CardFeature::OnAttack => "アタック時",
            CardFeature::OnAttackStart => "アタック開始時",
            CardFeature::OnTouch => "対象になった時",
            CardFeature::Awake => "覚醒",
            CardFeature::Exceed => "エクシード",
            CardFeature::OnExceed => "エクシードした時",
            CardFeature::AddLife => "ライフクロス追加",
            CardFeature::OnBurst => "ライフバースト発動時",
            CardFeature::LifeTrash => "ライフクロストラッシュ送り",
            CardFeature::LifeCrush => "クラッシュ",
            CardFeature::Damage => "ダメージ",
            CardFeature::OnLifeCrush => "クラッシュ時",
            CardFeature::Position => "シグニゾーン移動",
            CardFeature::Vanilla => "能力を持たない",
            CardFeature::Untouchable => "効果を受けない", // アークゲイン
            CardFeature::TopCheck => "トップ確認",
            CardFeature::BottomCheck => "ボトム確認",
            CardFeature::Barrier => "バリア獲得",
            CardFeature::MultiEner => "マルチエナ",
            CardFeature::LrigTrash => "ルリグトラッシュ",
            CardFeature::Charm => "チャーム",
            CardFeature::Craft => "クラフト",
            CardFeature::Acce => "アクセ",
            _ => "未処理フィーチャー"
        };
        write!(f, "{}", label)
    }
}

impl CardFeature {
    pub fn to_bit(&self) -> u64 {
        match self {
            CardFeature::DoubleCrush => 2_u64.pow(0) as u64,
            CardFeature::TripleCrush => 2_u64.pow(1),
            CardFeature::DiscardOpponent => 2_u64.pow(2),
            CardFeature::RandomDiscard => 2_u64.pow(3),
            CardFeature::Draw => 2_u64.pow(4),
            CardFeature::Assassin => 2_u64.pow(5),
            CardFeature::Freeze => 2_u64.pow(6),
            CardFeature::Drop => 2_u64.pow(7),
            // CardFeature::// DeckAttack => 2_u64.pow(),
            CardFeature::OnDrop => 2_u64.pow(8),
            CardFeature::OnRefresh => 2_u64.pow(9),
            CardFeature::Lancer => 2_u64.pow(10),
            CardFeature::SLancer => 2_u64.pow(11),
            CardFeature::Penetrate => 2_u64.pow(12),
            CardFeature::NonAttackable => 2_u64.pow(13),
            CardFeature::Down => 2_u64.pow(14),
            CardFeature::Up => 2_u64.pow(15),
            CardFeature::Charge => 2_u64.pow(16),
            CardFeature::EnerAttack => 2_u64.pow(17),
            CardFeature::Trash => 2_u64.pow(18),
            CardFeature::Ener => 2_u64.pow(19),
            CardFeature::PowerUp => 2_u64.pow(20),
            CardFeature::PowerDown => 2_u64.pow(21),
            CardFeature::Bounce => 2_u64.pow(22),
            CardFeature::DeckBounce => 2_u64.pow(23),
            CardFeature::Salvage => 2_u64.pow(24),
            CardFeature::LifeBurst => 2_u64.pow(25),
            CardFeature::Shadow => 2_u64.pow(26),
            CardFeature::Invulnerable => 2_u64.pow(27),
            CardFeature::OnSpell => 2_u64.pow(28),
            CardFeature::OnArts => 2_u64.pow(29),
            CardFeature::OnPiece => 2_u64.pow(30),
            CardFeature::OnBanish => 2_u64.pow(31),
            CardFeature::Banish => 2_u64.pow(32),
            CardFeature::Guard => 2_u64.pow(33),
            CardFeature::OnGuard => 2_u64.pow(34),
            CardFeature::AttackNoEffect => 2_u64.pow(35),
            CardFeature::OnAttack => 2_u64.pow(36),
            CardFeature::OnAttackStart => 2_u64.pow(37),
            CardFeature::OnTouch => 2_u64.pow(38),
            CardFeature::Awake => 2_u64.pow(39),
            CardFeature::Exceed => 2_u64.pow(40),
            CardFeature::OnExceed => 2_u64.pow(41),
            CardFeature::AddLife => 2_u64.pow(42),
            CardFeature::OnBurst => 2_u64.pow(43),
            CardFeature::LifeTrash => 2_u64.pow(44),
            CardFeature::LifeCrush => 2_u64.pow(45),
            CardFeature::Damage => 2_u64.pow(46),
            CardFeature::OnLifeCrush => 2_u64.pow(47),
            CardFeature::Position => 2_u64.pow(48),
            CardFeature::Vanilla => 2_u64.pow(49),
            CardFeature::Untouchable => 2_u64.pow(50),
            // CardFeature::// アークゲイ => 2_u64.pow(),
            CardFeature::TopCheck => 2_u64.pow(51),
            CardFeature::BottomCheck => 2_u64.pow(52),
            CardFeature::Barrier => 2_u64.pow(53),
            CardFeature::MultiEner => 2_u64.pow(54),
            CardFeature::LrigTrash => 2_u64.pow(55),
            CardFeature::Charm => 2_u64.pow(56),
            CardFeature::Craft => 2_u64.pow(57),
            CardFeature::Acce => 2_u64.pow(58),
        }
    }
}
